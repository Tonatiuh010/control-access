DROP PROCEDURE IF EXISTS GET_EMPLOYEE_DETAIL;
DELIMITER //
CREATE PROCEDURE GET_EMPLOYEE_DETAIL(
	IN IN_EMPLOYEE INT,
    OUT OUT_RESULT VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS 	= RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_EMPLOYEE_DETAIL] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
	SET OUT_RESULT = 'OK';
	SELECT 		
		E.EMPLOYEE_ID, 
		E.FIRST_NAME, 
		E.LAST_NAME, 
		E.POSITION_ID, 
		E.SHIFT SHIFT_ID, 
		E.STATUS EMPLOYEE_STATUS,     
        E.IMAGE IMAGE,
		P.POSITION_ID, 
		P.NAME POSITION_NAME, 
		P.DEPARTAMENT_ID,     
		P.JOB_ID,     
		D.NAME DEPARTAMENT,
		D.CODE DEPTO_CODE,         	
		J.NAME JOB, 
		J.DESCRIPTION JOB_DETAIL, 	
		S.NAME SHIFT_CODE, 
		S.CLOCK_IN IN_SHIFT, 
		S.CLOCK_OUT OUT_SHIFT,
		S.LUNCH_TIME LUNCH, 
		S.DAY_COUNT SHIFT_INTERVAL, 
		C.CARD_ID, 
		C.NUMBER CARD_NUMBER, 
		C.STATUS CARD_STATUS
	FROM 
		EMPLOYEE E LEFT JOIN POSITION P ON E.POSITION_ID = P.POSITION_ID
		LEFT JOIN DEPARTAMENT D ON P.DEPARTAMENT_ID = D.DEPARTAMENT_ID
		LEFT JOIN JOB J ON P.JOB_ID = J.JOB_ID
		LEFT JOIN SHIFT S ON E.SHIFT = S.SHIFT_ID 
		LEFT JOIN CARD C ON C.EMPLOYEE_ID = E.EMPLOYEE_ID
	WHERE 
		E.EMPLOYEE_ID = IFNULL(IN_EMPLOYEE, E.EMPLOYEE_ID);	
        
END //
DELIMITER ;

/*set @OUT_RESULT = '';
call ctl_access.GET_EMPLOYEE_DETAIL(NULL, @OUT_RESULT);
select @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_EMPLOYEE_ACCESS_LEVEL;
DELIMITER //
CREATE PROCEDURE GET_EMPLOYEE_ACCESS_LEVEL (
	IN IN_EMPLOYEE INT, 
    OUT OUT_RESULT VARCHAR(500)   
) BEGIN 	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_EMPLOYEE_ACCESS_LEVEL] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
	SET OUT_RESULT = 'OK';
    
    SELECT 
		EAL.EMPLOYEE_ID,
		EAL.ACCESS_LEVEL_ID,
		AL.NAME,
		EAL.STATUS    
	FROM 
		EMPLOYEE_ACCESS_LEVEL EAL, ACCESS_LEVEL AL
	WHERE 
		EAL.ACCESS_LEVEL_ID = AL.ACCESS_LEVEL_ID
	AND	EAL.STATUS = 'ENABLED'
	AND	EAL.EMPLOYEE_ID = IFNULL(IN_EMPLOYEE, EAL.EMPLOYEE_ID);
    
END //
DELIMITER ;

/*set @OUT_RESULT = '0';
call ctl_access.GET_EMPLOYEE_ACCESS_LEVEL(NULL, @OUT_RESULT);
select @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_DEPARTAMENTS;
DELIMITER //
CREATE PROCEDURE GET_DEPARTAMENTS(
    IN IN_DEPTO INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_DEPARTAMENTS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;

    SET OUT_RESULT = 'OK';

    SELECT 
        DEPARTAMENT_ID, 
        CODE,
        NAME,
        STATUS 
    FROM 
        DEPARTAMENT
    WHERE 
        DEPARTAMENT_ID = IFNULL(IN_DEPTO, DEPARTAMENT_ID)
        AND STATUS = 'ENABLED';
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_DEPARTAMENTS(1, @OUT_RESULT);
SELECT  @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_JOBS;
DELIMITER //
CREATE PROCEDURE GET_JOBS(
    IN  IN_JOB INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_JOBS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';

    SELECT 
		JOB_ID, DESCRIPTION, NAME
    FROM
        JOB
    WHERE
        JOB_ID = IFNULL(IN_JOB, JOB_ID)
    AND STATUS = 'ENABLED';

END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_JOBS(1, @OUT_RESULT);
SELECT  @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_SHIFTS;
DELIMITER //
CREATE PROCEDURE GET_SHIFTS(
    IN  IN_SHIFT INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_SHIFTS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';

    SELECT 
		SHIFT_ID,         
        NAME,
        CLOCK_IN,
        CLOCK_OUT,
        LUNCH_TIME,
        DAY_COUNT
    FROM
        SHIFT
    WHERE
        SHIFT_ID = IFNULL(IN_SHIFT, SHIFT_ID)
    AND STATUS = 'ENABLED';

END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_SHIFTS(1, @OUT_RESULT);
SELECT  @OUT_RESULT;*/

DROP PROCEDURE IF EXISTS GET_CARDS;
DELIMITER //
CREATE PROCEDURE GET_CARDS(
    IN  IN_CARD INT,
    IN  IN_ASSIGNED BOOL,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_CARDS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';
    
	WITH X_CARD AS (
		SELECT 
			CARD_ID,         
			NUMBER,
			STATUS,
			EMPLOYEE_ID,
			CASE WHEN EMPLOYEE_ID IS NOT NULL THEN 1 ELSE 0 END ASSIGNED
		FROM 	CARD
		WHERE 	CARD_ID = IFNULL(IN_CARD, CARD_ID) 
	) 	SELECT * FROM  X_CARD 
		WHERE  	ASSIGNED =  IF( IN_ASSIGNED IS NULL,  
								ASSIGNED,  
								CASE WHEN IN_ASSIGNED THEN 1 ELSE 0 END
							);

END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_CARDS(NULL, FALSE, @OUT_RESULT);
SELECT  @OUT_RESULT;
*/	
CALL GET_CARDS(NULL, FALSE, @OUT_RESULT);

DROP PROCEDURE IF EXISTS GET_POSITIONS;
DELIMITER //
CREATE PROCEDURE GET_POSITIONS(
    IN  IN_POSITION INT,
    IN  IN_JOB INT,
    IN  IN_DEPTO INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_POSITIONS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';
    
	SELECT 
		P.POSITION_ID,
		P.NAME NAME,
		D.DEPARTAMENT_ID,
		D.NAME DEPARTAMENT,
		D.CODE DEPTO_CODE,
        J.JOB_ID,
		J.NAME JOB,
		J.DESCRIPTION JOB_DETAIL
	FROM 
		POSITION P 
			JOIN 
		JOB J ON P.JOB_ID = J.JOB_ID
			JOIN
		DEPARTAMENT D ON D.DEPARTAMENT_ID = P.DEPARTAMENT_ID
	WHERE
		P.POSITION_ID = IFNULL(IN_POSITION, P.POSITION_ID)
	AND J.JOB_ID = IFNULL(IN_JOB, J.JOB_ID)
    AND	D.DEPARTAMENT_ID = IFNULL(IN_DEPTO, D.DEPARTAMENT_ID)
    AND P.STATUS = 'ENABLED';	
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_POSITIONS(NULL, NULL, NULL, @OUT_RESULT);
SELECT  @OUT_RESULT;
*/	    

DROP PROCEDURE IF EXISTS GET_CHECKS;
DELIMITER //
CREATE PROCEDURE GET_CHECKS(
    IN  IN_CHECK 	INT,
    IN  IN_CARD	 	INT,
    IN  IN_EMPLOYEE INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_CHECKS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';
    
	SELECT 
		CC.CARD_ID,
		CC.CARD_CHECK_ID CHECK_ID, 
        C.NUMBER,
		E.EMPLOYEE_ID,
		CC.TIME_EXP, CC.CHECK_DT, CC.TYPE,
		E.FIRST_NAME, E.LAST_NAME,
        C.STATUS CARD_STATUS,
        CC.DEVICE_ID
	FROM 
		CARD_CHECK CC, 
		CARD C, 
		EMPLOYEE E
	WHERE 
		CC.CARD_ID = C.CARD_ID
		AND E.EMPLOYEE_ID = CC.EMPLOYEE_ID
		AND CC.CARD_ID = IFNULL(IN_CARD, CC.CARD_ID)
		AND E.EMPLOYEE_ID = IFNULL(IN_EMPLOYEE, E.EMPLOYEE_ID)
		AND CC.CARD_CHECK_ID = IFNULL(IN_CHECK, CC.CARD_CHECK_ID);
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_CHECKS(NULL, NULL, NULL, @OUT_RESULT);
SELECT  @OUT_RESULT;
*/

DROP PROCEDURE IF EXISTS GET_DEVICES;
DELIMITER //
CREATE PROCEDURE GET_DEVICES(
    IN  IN_DEVICE 	INT,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_DEVICES] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';
    
	SELECT 
		DEVICE_ID,
		NAME,
		ACTIVATION_COUNT,
		ERROR_COUNT,
		STATUS,
		UPDATED_ON
	FROM 
		DEVICE  
	WHERE 
		DEVICE_ID = IFNULL(IN_DEVICE, DEVICE_ID);
        
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_DEVICES(NULL, @OUT_RESULT);
SELECT  @OUT_RESULT;
*/


DROP PROCEDURE IF EXISTS GET_CHECK_DETAILS;
DELIMITER //
CREATE PROCEDURE GET_CHECK_DETAILS (
	IN 	IN_FROM_DT DATETIME,
    IN 	IN_TO_DT DATETIME,
    OUT OUT_RESULT VARCHAR(500)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_RESULT := CONCAT('ERROR -> ON [GET_CHECK_DETAILS] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    SET OUT_RESULT = 'OK';
    
    SELECT 
		CC.CARD_CHECK_ID,     
		CC.TIME_EXP, 
		CC.CHECK_DT, 
		CC.TYPE, 
		P.POSITION_ID, 
		P.NAME POSITION,
		J.JOB_ID,
		J.NAME JOB,
		D.DEPARTAMENT_ID,
		D.NAME DEPARTAMENT,
		D.CODE DEPARTAMENT_CODE
	FROM  
		CARD_CHECK CC 
			JOIN 
		EMPLOYEE E ON E.EMPLOYEE_ID = CC.EMPLOYEE_ID
			JOIN 
		POSITION P ON E.POSITION_ID = P.POSITION_ID
			JOIN 
		JOB J ON P.JOB_ID = J.JOB_ID
			JOIN
		DEPARTAMENT D ON D.DEPARTAMENT_ID = P.DEPARTAMENT_ID		    
	WHERE 
		CC.CHECK_DT BETWEEN IN_FROM_DT and IN_TO_DT;
        
END //
DELIMITER ;

/*
set @OUT_RESULT = '0';
CALL GET_CHECK_DETAILS(date(now()), last_day(now()), @OUT_RESULT);
SELECT  @OUT_RESULT;
*/

set @OUT_RESULT = '0';
CALL GET_CHECK_DETAILS(date(now()), last_day(now()), @OUT_RESULT);
SELECT  @OUT_RESULT;